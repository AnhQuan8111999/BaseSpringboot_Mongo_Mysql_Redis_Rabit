1.Giới thiệu :
   - MongoDb là 1 client server .Mongo Server( host là 27017 (có thể 1 số dịch vụ sẽ đổi đi để không bị thăm dò ))



2. So Sánh SQL và Mongo 
    -sql(table,row) : Cấu trúc dữ liệu là dạng bảng, mỗi bảng có 1 khóa chính , tham chiếu sang bảng khác thông qua khóa ngoại , dữ liệu toàn vẹn hơn vì các bảng liên kết với nhau thông qua khóa ngoại ... 
    -MongoDb ( Collection, Docoment) : kiểu dữ liệu , số lượng các trường có thể khác nhau => tính không toàn vẹn , khóa ngoại cũng không đảm bảo tính chặt chẽ . tạo 1 document thì 1 ID sẽ 
    được tự tạo -ObjectID với 24 kí tự 
   
    ObjectId : 
   - có 12 bytes ( 24 kí tự {0-9 & abcdef} ) : gồm 4 bytes timestamp, 5 bytes ngẫu nhiên , và 3 byte chưa giá trị . mỗi khi ta tạo 1 document mới sẽ có ObjectId được sắp xếp trật tự theo thời
     gian tạo 
    -Lí do có 24 kí tự 
     1 bytes = 8bit
     {0-9 & abcdef -16 kí tự} : 4 bit hình thành 16=2^4  kí tự cho 1 kí tự trọng bjectI =>       4*24 =12*8.
    
    - Methods :
     getTimestamp : db.product.findOne()._id.getTimestamp() 
     valueOf      : db.product.findOne()._id.valueOf()
     toString     : db.product.findOne()._id.str

     1 byte thì có 8 bit
   
   
 
3. Install ubutu
    sudo apt update
    sudo apt install mongodb      : cài đặt 
    sudo systemctl status mongodb : kiểm tra server 
   
   
   
4. Basic commands
   - show dbs;       - cho ta xem danh sách database
   - use<db-name> ;  - tạo db mới hoặc sử dụng db đó 
   - db;             - xem db hiện tại là gì 
   - db.<collection>.<command> (find, insert, update, updateMany,etc.)
  
   -Khi bắt đầu truy cập và dụng lệnh db; thì mặc định truy cập vào database test.
  
    Ví dụ : - tạo 1 database 'shopping_app'  : 
            use shopping_app;
            
          - insert dữ liệu vào collection 'category' : 
            db.category          
            db.category.insert ({name: 'Laptop'})
            
          - Xem các collection có trong db :
            db.getCollectionNames() hoặc show collections;
            
          - Tìm kiếm các document trong 1 collection 'category'
            db.category.find()
            db.category.find().pretty()  : hiện ra dễ nhìn.
            
          - insert dữ liệu vào collection  'product'
            db.product.insert({name : 'Ipad Charger' , 
            category:ObjectId("62563d5275b8209f99a141d8") })
            
          
   
 5. Data types
     - Boolean, Null, Number(Integer,Double), String, BigInt, Object, Array,Symbol, Date, ObjectID
     Ví dụ : 
     - Update vào collection 'product' 1 document 'stockQuantity'
    db.product.update({_id:ObjectId("62563f67d14b701280779c50")} ,{$set:{stockQuantity:100 }  })

     
     
6. Import data : 
    - Tải file csv để import
    - nhập lệnh : mongoimport --type csv -d <database> -c <collection> --headerline --drop 
    - kéo file csv thả và terminal và enter dòng lệnh trên 




7. Querry data 
   - $ne : không bằng
   - $gt : lớn hơn 
   - $gte : lớn hơn hoặc bằng
   - $lt : nhỏ hơn 
   - $in : nằm trong 
   - $nin : không nằm trong 
   - Ví dụ :
   tìm user có gender là male : db.user.find({gender:'male' })
   
   tìm user có age >10        :db.user.find({ age:{$lt:10} })

   tìm user có age =20 hoặc 25 :db.user.find({age:{$in: [20,25]} })
   
   tìm user có email kết thúc bằng edu : db.uset.find({email: /\edu$/ }) - $ biểu thị cho việc  kết thúc string
   
   tìm user có tên bắt đầu bằng j : db.user.find({name : /^j\./ })
   
   
   
   
  8. $and và $or 
    tìm user gender = male và age lớn hơn 10 : 
    db.user.find({gender:'male', age: {$gt:10 } })
    
    tìm user có gender = male hoặc age lớn hơn 10:
    db.user.find({ $or: [{gender:'male'},{age: {$gt:10 } }] })
    
    
    
    
  9.Nested object : mỗi document có thể chứa object khác 
  
    ví dụ : có 1 document : 
    { 
     _id: Object(...),
       profile:{
       city:"HaNoi",
       work:"abc"
     }
    }
  
  thì lúc querry cần chú ý : khi dùng điều kiện Object bên trong thì phải '.' chứ không được viết dạng Object 
  db.user.find({"profile.city" : "HaNoi" });
  
  
  
   
10. Array of embedded documents
    - embedded documents : 1 collection có field là array chứa embedded documents 
   
    Ví dụ :
    Query tất cả pet_owner có type của  pets  là 1
    db.pet_owner({"pets.type" : 1}) 
   
    Query pet_owner có type =2 , name bắt đầu = c
    db.pet_owner.find({ pets: { $elemMath: { type:2, name:/^c/ } } })
    
    
    
    
11.Query empty fields

    -tìm trong collection nhưng file bị thiếu 
    cách 1 : trả về tất cả  field không tồn tại và field có giá trị null
    db.user.find({ last_login : null  }) 


    cách 2 : chỉ trả về field không tồn tại  
    db.user.find({ last_login: { $exists:false} });




12. $where operator : sử dụng bằng javascript 
    tìm user có first_name giống last_name
    db.user.find({ $where: "this.first_name === this.lastname"})

    Lưu ý : không nên dùng $where vì lí do bảo mật. Dễ dính database Injection attack
        vì $where nhận vào 1 string, nếu string đó mà được tạo bởi cả dữ liệu người dùng gửi lên thì nên cẩn thận. Nếu ko có dính đến user input thì ok . 
        
        
        
        
13. Robo3T 

  Tải file tar.gz trên web : https://studio3t.com/download-studio3t-free
  mở terminal tại thư mục tải file trên :
  tar -xvzf studio-3t-linux-x64.tar.gz
  sh ./studio-3t-linux-x64.sh
 
 và cài đặt 
 
 
 
 
14.Pagination 
  - skip(x) : bỏ qua x bản đầu tiên 
  -limit (y) : lấy y bản đầu tiên 
  -count     : trả về số lượng
  -skip(x).limit(y) : trả về từ bản thứ x+1 đến y 
 
   ví dụ : db.user.find({ gender: 'male' }).skip(4).limit(6)




15.Sort
    - db.user.find(query).sort(field :-1)
  
    field : 1 từ bé đến lớn , -1 từ lớn về bé
  
    - trường hợp sắp xếp nhiều trường thì sẽ sắp xếp field 1 trước rồi mới đến field mà k làm ảnh hưởng đến kết qura sx field 1 .
     ví dụ : sau khi sx field 1 thì có nhuwnxgtruowfng cùng giá trị thì field2 sẽ sx những trường đấy .
     db.user.find(query).sort(field :-1 , field : 1)
   
 
   
16.Update documents
  
   - db.collection.updateOne(whatToUpdate , howTUpdate)
 
   whatToupdate = query object
   HowToUpdate ={ $set: { field1 : value1, field2 : value2 ,...} } 
   -lưu ý : update thì chỉ cần truyền cái gì cần update thôi , đừng truyền những cái k cần update vào .




17.Atomic Operators

  - $inc  : tăng field lên theo ý muốn 
    db.user.updateOne({
    _id:ObjectId("62564f2ebd27ff104428a2a5")
    },
      { $inc:{
          age:1,
      }
   })



   -$push : đưa 1 giá trị vào field nào đó 

   db.post.updateOne({
    _id:ObjectId("62564f2ebd27ff104428a2a5")
    },
     { $post:{
          like: ObjectId("62564f8dbd27ff104428a2a6")
      }
    })


   lưu ý : chạy 1 lần nữa thì sẽ xuất hiện 2 lần - như vậy là sai và cần dùng pull


  -$pull : lấy giá trị ra khỏi field
    db.post.updateOne({
   _id:ObjectId("62564f2ebd27ff104428a2a5")
   },
    { $pull:{
          like: ObjectId("62564f8dbd27ff104428a2a6")
       }
    })



  -addToSet : thêm 1 dữ liệu vào 1 field, nếu field đó có rồi thì sẽ không thêm nữa (modifieldCount =0) , nếu chưa có sẽ thêm vào ( modifieldCount =1 )

    db.post.updateOne({
     _id:ObjectId("62564f2ebd27ff104428a2a5")
     },
       { $addToSet:{
          like: ObjectId("62564f8dbd27ff104428a2a6")
          }
     })




18. Delete document

   db.user.deleteOne({ _id:ObjectId("62564f2ebd27ff104428a2a5")})

   db.user.deleteMany({
   gender:'male'
   })




19.Collection methods
  
  -db.pet_owner.renameCollection('petOwner')  : đổi tên 
  - db.user.drop()  : xóa collection
 


20.Indexing 
  - sort bình thường thì tìm kiếm rất lâu, nhưng có index sẽ rất nhanh 
    sắp xếp theo : 1- tăng dần , -1 giảm dần 

   ví dụ : db.user.createIndex({ email:1})



21. Compound index 

  - db.user.createIndex ({age:1 , email :-1})
 
  sử dụng index thì insert hay update sẽ chậm hơn , tốn ram .


